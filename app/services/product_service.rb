# app/services/product_service.rb
class ProductService
  def self.set_stock_per_product(stock_info)
      product = Product.find_or_initialize_by(code: stock_info["codigo"])

      product.tap do
        it.assign_attributes(
          stock: stock_info["estoque"]
        )
      end
  end

  def self.create_or_update_from_api(product_data)
    product = Product.find_or_initialize_by(code: product_data["codigo"])
    product.tap do
      it.assign_attributes(
        sku: product_data["SKU"],
        barcode: product_data["CodigoBarras"],
        ncm_code: product_data["CodigoNCM"],
        description: product_data["Descricao"],
        complement: product_data["Complemento"],
        brand: product_data["Marca"],
        status: product_data["Status"],
        price: product_data["Preco"],
        group: product_data["Grupo"],
        offer: product_data["Oferta"],
        offer_date: product_data["DataOferta"]&.to_date,
        normal_price: product_data["PrecoNormal"],
        unit_code: product_data["CodigoUnidade"],
        department_code: product_data["CodigoDepartamento"],
        department: product_data["Departamento"],
        active: product_data["Ativo"],
        tax_code: product_data["CodigoTributario"],
        stock1: product_data["Estoque1"],
        stock2: product_data["Estoque2"],
        stock3: product_data["Estoque3"],
        stock4: product_data["Estoque4"],
        stock5: product_data["Estoque5"],
        list_price: product_data["PrecoLista"],
        pdv_price: product_data["PrecoPDV"],
        pdv_price3: product_data["PrecoPDV3"],
        pdv_price4: product_data["PrecoPDV4"],
        pdv_price5: product_data["PrecoPDV5"],
        label_price: product_data["PrecoEtiqueta"],
        poster_price: product_data["PrecoCartaz"],
        sale_price2: product_data["PrecoVenda2"],
        sale_price3: product_data["PrecoVenda3"],
        sale_price4: product_data["PrecoVenda4"],
        sale_price5: product_data["PrecoVenda5"],
        factor_pr3: product_data["FatorPr3"],
        factor_pr4: product_data["FatorPr4"],
        factor_pr5: product_data["FatorPr5"],
        stock_code: product_data["CodEstoque"],
        minimum_stock: product_data["EstoqueMinimo"],
        maximum_stock: product_data["EstoqueMaximo"],
        average_daily_sale: product_data["VendaMediaDiaria"],
        space: product_data["Espaco"],
        cashier_code: product_data["CodigoCaixa"],
        purchase_cost: product_data["CustoCompra"],
        company_cost: product_data["CustoEmpresa"],
        tax_cost: product_data["CustoFiscal"],
        average_cost: product_data["CustoMedio"],
        transfer_cost: product_data["CustoTranferencia"],
        sale_cost: product_data["CustoVenda"],
        store_sector: product_data["SetorLoja"],
        deposit_sector: product_data["SetorDeposito"],
        unit_price_measure: product_data["PrecoUnidadeMedida"],
        pdv_description: product_data["DescricaoPDV"],
        blocked: product_data["Bloqueado"],
        height: product_data["Altura"],
        width: product_data["Largura"],
        depth: product_data["Profundidade"],
        weight: product_data["Peso"],
        net_weight: product_data["PesoLiquido"],
        client_description: product_data["DescricaoCliente"],
        temperature: product_data["Temperatura"],
        package_type: product_data["TipoEmbalagem"],
        package_quantity: product_data["QuantidadeEmbalagem"],
        changed_product: product_data["Alterado"],
        etq: product_data["Etq"],
        ctz: product_data["Ctz"],
        key: product_data["Tecla"],
        replenishment_term: product_data["PzRepos"],
        delivery_term: product_data["PzEntrega"],
        security_days: product_data["DiasSeg"],
        validity: product_data["Validade"],
        minimum_validity: product_data["ValMinima"],
        marked: product_data["Marcado"],
        previous_sale_price: product_data["PrVendaAnt"],
        sale_price_date: product_data["DtPrVenda"]&.to_date,
        sale_price_user: product_data["UsuAltPr"],
        margin: product_data["Margem"],
        minimum_margin: product_data["MargemMin"],
        offer_quantity: product_data["QtdeOferta"],
        offer_start_date: product_data["DtIniOferta"]&.to_date,
        last_purchase_date: product_data["DtUltComp"]&.to_date,
        last_purchase_price: product_data["PrUltComp"],
        last_purchase_quantity: product_data["QultComp"],
        last_purchase_symbol: product_data["UltSimbComp"],
        last_purchase_reduction_bc: product_data["RedBCUltComp"],
        last_supplier: product_data["UltForn"],
        costs_date: product_data["DtCustos"]&.to_date,
        commission: product_data["Comissao"],
        cost_difference: product_data["DifCusto"],
        sale_difference: product_data["DifVenda"],
        magnetic_label: product_data["EtqMag"],
        store_quantity: product_data["QtdeAbLoja"],
        store_date: product_data["DtAbLoja"]&.to_date,
        previous_offer_date: product_data["DataOfAnt"]&.to_date,
        previous_offer_price: product_data["PrecoOfertaAnt"],
        previous_normal_price: product_data["PrecoNormalAnt"],
        sale_type_change: product_data["TpAltPrVenda"],
        cost_difference1: product_data["DifCusto1"],
        cost_difference2: product_data["DifCusto2"],
        cost_difference3: product_data["DifCusto3"],
        cost_difference4: product_data["DifCusto4"],
        cost_difference5: product_data["DifCusto5"],
        sale_difference1: product_data["DifVenda1"],
        sale_difference2: product_data["DifVenda2"],
        sale_difference3: product_data["DifVenda3"],
        sale_difference4: product_data["DifVenda4"],
        sale_difference5: product_data["DifVenda5"],
        previous_purchase_cost: product_data["CtCompraAnt"],
        previous_average_cost: product_data["CtMedioAnt"],
        previous_tax_cost: product_data["CtFiscalAnt"],
        previous_company_cost: product_data["CtEmpresaAnt"],
        previous_transfer_cost: product_data["CtTransfAnt"],
        previous_last_purchase_price: product_data["PrUltCompAnt"],
        transfer_average_cost: product_data["TransCtMedio"],
        acquisition: product_data["Faquisicao"],
        extra1: product_data["Extra1"],
        extra2: product_data["Extra2"],
        extra3: product_data["Extra3"],
        extra4: product_data["Extra4"].to_i,
        extra5: product_data["Extra5"].to_i,
        extra6: product_data["Extra6"].to_i,
        extra7: product_data["Extra7"].to_i,
        extra8: product_data["Extra8"].to_i,
        extra9: product_data["Extra9"].to_i,
        product_extra1: product_data["Prod_Extra1"],
        product_extra2: product_data["Prod_Extra2"],
        product_extra3: product_data["Prod_Extra3"],
        product_extra4: product_data["Prod_Extra4"].to_i,
        product_extra5: product_data["Prod_Extra5"].to_i,
        product_extra6: product_data["Prod_Extra6"],
        product_extra7: product_data["Prod_Extra7"],
        product_extra8: product_data["Prod_Extra8"].to_i,
        product_extra9: product_data["Prod_Extra9"].to_i,
        update_date: product_data["Dataalt"]&.to_date, # Converte para data
        update_user: product_data["Usualt"],
        fronts: product_data["Frentes"],
        origin_code: product_data["Orig_codigo"],
        table_price: product_data["PrTabela"],
        st_credit: product_data["CreditoST"],
        sim_code: product_data["CodigoSim"],
        previous_offer_date2: product_data["DataOfAnt2"]&.to_date, # Converte para data
        previous_offer_price2: product_data["PrecoOfertaAnt2"],
        previous_normal_price2: product_data["PrecoNormalAnt2"],
        normal_price3: product_data["PrNormal3"],
        normal_price4: product_data["PrNormal4"],
        normal_price5: product_data["PrNormal5"],
        previous_normal_price3: product_data["PrecoNormalAnt3"],
        previous_normal_price4: product_data["PrecoNormalAnt4"],
        previous_normal_price5: product_data["PrecoNormalAnt5"],
        previous_offer_price3: product_data["PrecoOfertaAnt3"],
        previous_offer_price4: product_data["PrecoOfertaAnt4"],
        previous_offer_price5: product_data["PrecoOfertaAnt5"],
        margin3: product_data["Margem3"],
        margin4: product_data["Margem4"],
        margin5: product_data["Margem5"],
        offer_type_agent: product_data["TipoAgOf"],
        previous_offer_type_agent: product_data["TipoAgOfAnt"],
        previous_offer_type_agent2: product_data["TipoAgOfAnt2"],
        exchange_types: product_data["TpTrocas"],
        default_sale_price: product_data["PrVdaPadrao"],
        tax_percentage: product_data["PercImpostos"],
        previous_sale_price2: product_data["PrVenda2Ant"],
        previous_sale_price2_2: product_data["PrVenda2Ant2"],
        price_code: product_data["CodigoPreco"],
        descriptive: product_data["Descritivo"],
        function: product_data["Funcao"],
        scale: product_data["Balanca"],
        buyer_code: product_data["CodigoComprador"],
        allowance: product_data["Alcada"],
        stock_factor: product_data["FatorEstoque"],
        maintenance_datetime: product_data["DataHoraManutencao"]&.to_datetime, # Converte para datetime
        agpr_price1: product_data["AgprPreco1"],
        agpr_price2: product_data["AgprPreco2"],
        agpr_price3: product_data["AgprPreco3"],
        agpr_price4: product_data["AgprPreco4"],
        agpr_price5: product_data["AgprPreco5"],
        agof_price1: product_data["AgofPreco1"],
        agof_price2: product_data["AgofPreco2"],
        agof_price3: product_data["AgofPreco3"],
        agof_price4: product_data["AgofPreco4"],
        agof_price5: product_data["AgofPreco5"]
      )
    end
  end

  private

  def self.format_product_codes
    # TODO provavelmente tenha uma referencia com unidade e na query seria add um join aqui.
    "(#{Product.pluck(:code).join(',')})"
  end
end
